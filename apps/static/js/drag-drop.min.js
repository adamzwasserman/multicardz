 class SpatialDragDrop{constructor(){this.selectedTags = new Set();this.draggedElements = [];this.stateCache = null;this.stateCacheTime = 0;this.CACHE_DURATION = 1000;this.listeners = new WeakMap();this.renderDebounceTimer = null;this.DEBOUNCE_DELAY = 100}initialize(){this.initializeZones();this.initializeControls();this.initializeTagDragging();this.observeZoneChanges();this.updateStateAndRender()}deriveStateFromDOM(){const now = Date.now();if(this.stateCache &&(now - this.stateCacheTime)< this.CACHE_DURATION){return this.stateCache}const state ={zones:this.discoverZones(),controls:this.getRenderingControls()};this.stateCache = state;this.stateCacheTime = now;return state}discoverZones(){const zones ={};const zoneElements = document.querySelectorAll('[data-zone-type]:not([data-zone-type="tag-cloud"])');if(!zoneElements || zoneElements.length === 0){return zones}zoneElements.forEach(zone =>{const zoneType = zone.dataset.zoneType;if(!zoneType)return;const tags = [];const collection = zone.querySelector('.tag-collection');if(collection){collection.querySelectorAll('[data-tag]').forEach(tag =>{const tagName = tag.dataset.tag;if(tagName)tags.push(tagName)})}zones[zoneType] ={tags:tags,metadata:this.getZoneMetadata(zone)}});return zones}getZoneMetadata(zoneElement){if(!zoneElement)return{};return{label:zoneElement.querySelector('.zone-label')?.textContent || '',accepts:zoneElement.dataset.accepts?.split(',')|| ['tags'],position:zoneElement.dataset.position || 'static',maxTags:this.parseMaxTags(zoneElement.dataset.maxTags),behavior:zoneElement.dataset.behavior || 'standard',temporalRange:zoneElement.dataset.temporalRange || null}}parseMaxTags(value){if(!value)return null;const parsed = parseInt(value,10);return isNaN(parsed)? null:parsed}getRenderingControls(){const controls ={};const controlElements = document.querySelectorAll('[data-affects-rendering="true"]');if(!controlElements || controlElements.length === 0){return{startWithAllCards:false,startWithCardsExpanded:false,showColors:true}}controlElements.forEach(control =>{const key = control.id || control.name || control.dataset.controlKey;if(!key)return;if(control.type === 'checkbox'){controls[key] = control.checked || false}else if(control.tagName === 'SELECT'){controls[key] = control.value || ''}else if(control.type === 'radio' && control.checked){controls[control.name] = control.value || ''}});return controls}initializeZones(){const zoneContainer = document.querySelector('.zones-wrapper')|| document.querySelector('.spatial-grid')|| document.body;zoneContainer.addEventListener('drop',(e)=>{const zone = e.target.closest('[data-zone-type]:not([data-zone-type="tag-cloud"])');if(zone)this.handleZoneDrop(e,zone)});zoneContainer.addEventListener('dragover',(e)=>{const zone = e.target.closest('[data-zone-type]:not([data-zone-type="tag-cloud"])');if(zone)this.handleZoneDragOver(e,zone)});zoneContainer.addEventListener('dragleave',(e)=>{const zone = e.target.closest('[data-zone-type]:not([data-zone-type="tag-cloud"])');if(zone)this.handleZoneDragLeave(e,zone)});const clouds = document.querySelectorAll('.cloud');clouds.forEach(cloud =>{cloud.addEventListener('drop',(e)=> this.handleCloudDrop(e));cloud.addEventListener('dragover',(e)=>{e.preventDefault();e.currentTarget.classList.add('drag-over')});cloud.addEventListener('dragleave',(e)=>{e.currentTarget.classList.remove('drag-over')})})}initializeTagDragging(){const tagContainer = document.body;tagContainer.addEventListener('dragstart',(e)=>{if(e.target.matches('[data-tag]')){this.handleTagDragStart(e)}});tagContainer.addEventListener('dragend',(e)=>{if(e.target.matches('[data-tag]')){this.handleTagDragEnd(e)}});tagContainer.addEventListener('click',(e)=>{if(e.target.matches('[data-tag]')){this.handleTagClick(e)}});document.querySelectorAll('[data-tag]').forEach(tag =>{tag.draggable = true;tag.setAttribute('role','button');tag.setAttribute('aria-grabbed','false');tag.setAttribute('tabindex','0')})}handleTagDragStart(event){const draggedTag = event.target;if(!draggedTag.dataset.tag)return;if(draggedTag.dataset.type === 'group-tag'){this.draggedElements = this.expandGroupTag(draggedTag)}else if(this.selectedTags.has(draggedTag)){this.draggedElements = Array.from(this.selectedTags)}else{this.draggedElements = [draggedTag];this.clearSelection()}this.draggedElements.forEach(el =>{el.classList.add('dragging');el.setAttribute('aria-grabbed','true')});event.dataTransfer.effectAllowed = 'move';event.dataTransfer.setData('text/plain',this.draggedElements.length.toString())}handleTagDragEnd(event){this.draggedElements.forEach(el =>{el.classList.remove('dragging');el.setAttribute('aria-grabbed','false')});this.draggedElements = []}handleTagClick(event){const tag = event.currentTarget;if(event.metaKey || event.ctrlKey){event.preventDefault();this.toggleTagSelection(tag)}else{this.clearSelection()}}toggleTagSelection(tagElement){if(!tagElement)return;if(this.selectedTags.has(tagElement)){this.selectedTags.delete(tagElement);tagElement.classList.remove('selected');tagElement.setAttribute('aria-selected','false')}else{this.selectedTags.add(tagElement);tagElement.classList.add('selected');tagElement.setAttribute('aria-selected','true')}}clearSelection(){this.selectedTags.forEach(tag =>{tag.classList.remove('selected');tag.setAttribute('aria-selected','false')});this.selectedTags.clear()}handleZoneDragOver(event,zone){event.preventDefault();zone.classList.add('drag-over');if(this.draggedElements.length > 1){zone.dataset.dropCount = this.draggedElements.length}}handleZoneDragLeave(event,zone){zone.classList.remove('drag-over');delete zone.dataset.dropCount}handleZoneDrop(event,zone){event.preventDefault();zone.classList.remove('drag-over');delete zone.dataset.dropCount;if(!this.draggedElements || this.draggedElements.length === 0)return;const targetZone = zone.dataset.zoneType;this.moveTags(this.draggedElements,targetZone);this.draggedElements.forEach(el =>{el.classList.remove('dragging');el.setAttribute('aria-grabbed','false')});this.draggedElements = [];this.clearSelection()}handleCloudDrop(event){event.preventDefault();event.currentTarget.classList.remove('drag-over');if(!this.draggedElements || this.draggedElements.length === 0)return;this.moveTags(this.draggedElements,'cloud');this.draggedElements.forEach(el =>{el.classList.remove('dragging');el.setAttribute('aria-grabbed','false')});this.draggedElements = [];this.clearSelection()}moveTags(tagElements,targetZone){const validTags = tagElements.filter(el => el && el.dataset && el.dataset.tag && el.nodeType === Node.ELEMENT_NODE);if(validTags.length === 0)return;if(targetZone === 'cloud'){this.returnTagsToCloud(validTags)}else{const targetZoneElement = document.querySelector(`[data-zone-type="${targetZone}"]`);if(!targetZoneElement){console.error(`Zone not found:${targetZone}`);return}const targetContainer = targetZoneElement.querySelector('.tag-collection');if(!targetContainer){console.error(`No tag collection in zone:${targetZone}`);return}const maxTags = this.parseMaxTags(targetZoneElement.dataset.maxTags);if(maxTags && targetContainer.children.length + validTags.length > maxTags){console.warn(`Zone ${targetZone}would exceed max tags:${maxTags}`);return}validTags.forEach(tag =>{if(!targetContainer.contains(tag)){targetContainer.appendChild(tag);tag.classList.remove('tag-cloud');tag.classList.add('tag-active')}})}this.invalidateCache();this.updateStateAndRender()}returnTagsToCloud(tagElements){const tagsByType ={};tagElements.forEach(tag =>{const type = tag.dataset.type || 'tag';if(!tagsByType[type])tagsByType[type] = [];tagsByType[type].push(tag)});for(const [tagType,tags] of Object.entries(tagsByType)){const cloudSelector = tagType === 'ai-tag' ? '.cloud-ai .tags-wrapper':'.cloud-user .tags-wrapper';const cloudContainer = document.querySelector(cloudSelector);if(cloudContainer){tags.forEach(tag =>{if(!cloudContainer.contains(tag)){cloudContainer.appendChild(tag);tag.classList.remove('tag-active','selected');tag.classList.add('tag-cloud')}})}}}expandGroupTag(groupTagElement){const groupId = groupTagElement.dataset.group;const memberTags = groupTagElement.dataset.members?.split(',')|| [];const tagElements = [];memberTags.forEach(tagName =>{const tagElement = document.querySelector(`[data-tag="${tagName}"]`);if(tagElement){tagElements.push(tagElement)}});return tagElements}invalidateCache(){this.stateCache = null;this.stateCacheTime = 0}async updateStateAndRender(){if(this.renderDebounceTimer){clearTimeout(this.renderDebounceTimer)}this.renderDebounceTimer = setTimeout(async()=>{const tagsInPlay = this.deriveStateFromDOM();const tagsField = document.getElementById('tagsInPlay');if(tagsField){tagsField.value = JSON.stringify(tagsInPlay,null,2)}await this.renderCards(tagsInPlay)},this.DEBOUNCE_DELAY)}async renderCards(tagsInPlay){try{const response = await fetch('/api/v2/render/cards',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({tagsInPlay})});if(response.ok){const html = await response.text();const container = document.getElementById('cardContainer');if(container){container.innerHTML = html}}}catch(error){console.error('Failed to render cards:',error)}}observeZoneChanges(){const container = document.querySelector('.zones-wrapper')|| document.querySelector('.spatial-grid')|| document.body;const observer = new MutationObserver((mutations)=>{mutations.forEach(mutation =>{if(mutation.type === 'childList'){mutation.addedNodes.forEach(node =>{if(node.nodeType === 1 && node.dataset?.zoneType){this.attachZoneListeners(node)}});mutation.removedNodes.forEach(node =>{if(node.nodeType === 1 && node.dataset?.zoneType){this.detachZoneListeners(node)}})}})});observer.observe(container,{childList:true,subtree:true})}attachZoneListeners(zoneElement){if(!zoneElement || this.listeners.has(zoneElement))return;const handlers ={drop:(e)=> this.handleZoneDrop(e,zoneElement),dragover:(e)=> this.handleZoneDragOver(e,zoneElement),dragleave:(e)=> this.handleZoneDragLeave(e,zoneElement)};zoneElement.addEventListener('drop',handlers.drop);zoneElement.addEventListener('dragover',handlers.dragover);zoneElement.addEventListener('dragleave',handlers.dragleave);zoneElement.setAttribute('role','region');zoneElement.setAttribute('aria-label',zoneElement.dataset.zoneType + ' drop zone');this.listeners.set(zoneElement,handlers)}detachZoneListeners(zoneElement){if(!zoneElement || !this.listeners.has(zoneElement))return;const handlers = this.listeners.get(zoneElement);zoneElement.removeEventListener('drop',handlers.drop);zoneElement.removeEventListener('dragover',handlers.dragover);zoneElement.removeEventListener('dragleave',handlers.dragleave);this.listeners.delete(zoneElement)}initializeControls(){document.querySelectorAll('[data-affects-rendering="true"]').forEach(control =>{const eventType = control.type === 'checkbox' ? 'change':control.tagName === 'SELECT' ? 'change':'input';control.addEventListener(eventType,()=>{this.invalidateCache();this.updateStateAndRender()});if(control.dataset.immediateVisual === 'true'){control.addEventListener('change',(e)=>{this.applyImmediateVisualFeedback(control)})}})}applyImmediateVisualFeedback(control){const action = control.dataset.visualAction;if(!action)return;switch(action){case 'toggle-class':const className = control.dataset.className;document.body.classList.toggle(className,control.checked);break;case 'show-hide':const targetId = control.dataset.targetId;const target = document.getElementById(targetId);if(target){target.style.display = control.checked ? 'block':'none'}break}}restoreView(tagsInPlay){console.log('Restoring view with tagsInPlay:',tagsInPlay);this.clearAllZones();if(tagsInPlay && tagsInPlay.zones){Object.entries(tagsInPlay.zones).forEach(([zoneId,zoneData])=>{const zone = document.querySelector(`[data-zone-type="${zoneId}"]`);if(!zone){console.warn(`Zone ${zoneId}not found`);return}const zoneWrapper = zone.querySelector('.tags-wrapper')|| zone.querySelector('.drop-zone-content');if(!zoneWrapper){console.warn(`No wrapper found in zone ${zoneId}`);return}if(zoneData.tags && Array.isArray(zoneData.tags)){zoneData.tags.forEach(tagName =>{const tag = document.querySelector(`[data-tag="${tagName}"]`);if(tag){zoneWrapper.appendChild(tag);console.log(`Moved tag ${tagName}to zone ${zoneId}`)}else{console.warn(`Tag ${tagName}not found`)}})}})}const tagsTextarea = document.getElementById('tagsInPlay');if(tagsTextarea){tagsTextarea.value = JSON.stringify(tagsInPlay,null,2)}this.updateStateAndRender()}clearAllZones(){const zones = document.querySelectorAll('.drop-zone');zones.forEach(zone =>{const tags = zone.querySelectorAll('.tag');tags.forEach(tag =>{const tagType = tag.dataset.type || 'tag';let cloud;if(tagType === 'ai-tag'){cloud = document.querySelector('.cloud-ai .tags-wrapper')}else if(tagType === 'group-tag'){cloud = document.querySelector('.cloud-group .tags-wrapper')}else if(tagType === 'system-tag'){cloud = document.querySelector('.cloud-system .tags-wrapper')}else{cloud = document.querySelector('.cloud-user .tags-wrapper')}if(cloud){cloud.appendChild(tag)}})})}}if(document.readyState === 'loading'){document.addEventListener('DOMContentLoaded',()=>{window.dragDropSystem = new SpatialDragDrop();window.dragDropSystem.initialize();console.log('MultiCardz™ drag-drop system initialized')})}else{window.dragDropSystem = new SpatialDragDrop();window.dragDropSystem.initialize();console.log('MultiCardz™ drag-drop system initialized')}